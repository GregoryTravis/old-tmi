render-attributes attributes = join-list (map (/. (k) [k, "=", "\"", (deref attributes k), "\""]) (keys attributes)) " "

tag name = /. (attributes contents) ["<", name, " ", (render-attributes attributes), ">", contents, "</", name, ">"]
table = tag "table"
tr = tag "tr"
td = tag "td"
p2 = tag "p2"
anchor = tag "a"
form = tag "form"
input = tag "input"
br = tag "br"
submit = input {type: "submit", value: "Submit"} ""
hidden k v = input {type: "hidden", name: k, value: v} ""

derefs rec ks = map (/. (k) (deref rec k)) ks
derefses rel ks = map (/. (rec) derefs rec ks) rel

;;html-rec-row keys = /. (rec) tr {} (map (/. (v) (td {} v)) (map (/. (k) deref rec k) keys))
html-row os = tr {} (map (/. (o) td {} o) os)
html-rel-table [] = table {border: 1} (tr {} (td {} "empty"))
html-rel-table rel = let ks = tmi-sort (keys (nth 0 rel)) string<?
  in table {border: 1} (map html-row (list-append [ks] (derefses rel ks)))

html-named-rel name rel = [p2 {} name, html-rel-table rel]
html-db-tables db = map (/. (k) html-named-rel k (deref db k)) (keys db)

render-form action table pk pkv k v =
  strings-append (map to-string (flatten-completely
    (form {action: action}
      [k, input {type: "text", name: k, value: v} "",
       br {} "",
       pk, input {type: "text", name: pk, value: pkv} "",
       br {} "",
       hidden "pk" pk,
       hidden "k" k,
       submit])))

cell-editor table-name pk pkv k = let
    dn2 = deref-node "card"
    wn = wherre-node (/. (rec) (deref rec pk) == pkv)
    dn = deref-node k
    on = one-node
 in let own = compose-nodes on (compose-nodes wn dn2)
     in let down = compose-nodes dn own
         in do
 db <- read-data "old.json"
 v <- Return (read down db)
 Return (render-form "/receive-form" "card" pk pkv k v)

receive-form-handler params = let
    k = deref params "k"
    pk = deref params "pk"
 in let 
      nv = to-int (deref params k)
      pkv = to-int (deref params pk)
 in let 
      dn2 = deref-node "card"
      wn = wherre-node (/. (rec) (deref rec pk) == pkv)
      dn = deref-node k
      on = one-node
   in let own = compose-nodes on (compose-nodes wn dn2)
       in let down = compose-nodes dn own
           in do
  db <- read-data "old.json"
  ndb <- Return (write down db nv)
  [] <- write-data "old.json" ndb
  Return Ok

;; cell-editor table-name pk pkv k = Return ["asdfasdfasdf", 4, deref-node "card"]

  ;;Return ["hey", table-name, pk, pkv, k]

edit-link table-name rec pk k = anchor {href: make-call cell-editor [table-name, pk, (deref rec pk), k]} (deref rec k)
editable-derefs table-name rec ks pk = map (/. (k) edit-link table-name rec pk k) ks
editable-derefses table-name rel ks pk = map (/. (rec) editable-derefs table-name rec ks pk) rel

html-editable-row os = tr {} (map (/. (o) td {} o) os)
html-editable-rel-table [] pk = table {border: 1} (tr {} (td {} "empty"))
html-editable-rel-table table-name rel pk = let ks = tmi-sort (keys (nth 0 rel)) string<?
  in table {border: 1} (map html-editable-row (list-append [ks] (editable-derefses table-name rel ks pk)))
