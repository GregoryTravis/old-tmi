(define (tokens->src-1 tokens current-line current-column)
  (mtch tokens
    ((a as) . rest)
      (++ " " as " " (tokens->src-1 rest current-line (+ 2 current-column (string-length as))))
    ((a as (line column)) . rest)
      (++ (apply ++ (ntimes (max 0 (- line current-line)) "\n"))
          (apply ++ (ntimes (max 0 (- column (if (> line current-line) 0 current-column))) " "))
          as
          (tokens->src-1 rest line (+ column (string-length as))))
    '() ""))
(define (tokens->src tokens) (++ (tokens->src-1 tokens 0 0) "\n"))

(define (should-insert-semicolon tokens group-stack)
  (mtch (list tokens group-stack)
    (((a as (ra ca)) . tokens) ((group-type (b bs (rb cb))) . gss))
    (and (member group-type '(let_keyword of_keyword where_keyword do_keyword))
         (> ra rb)
         (eq? ca cb))
    x #f))

(define (is-dedent-block-close? tokens group-stack)
  (mtch (list tokens group-stack)
    (((a as (ra ca)) . tokens) ((group-type (b bs (rb cb))) . gss))
     (and (member group-type '(let_keyword of_keyword where_keyword do_keyword))
          (> ra rb)
          (< ca cb))
    ('() (('of_keyword (b bs (rb cb))) . gss))
      #t
    ('() (('where_keyword (b bs (rb cb))) . gss))
      #t
    x
      #f))

(define (preprocess tokens group-stack)
  (if (is-dedent-block-close? tokens group-stack)
    (mtch (list tokens group-stack)
      ((('in_keyword . x) . rest) (('let_keyword . xx) . gs-rest))
        (cons '(p-rcb "-}") (cons `(in_keyword . ,x) (preprocess rest gs-rest)))
      ((('in_keyword . x) . rest) group-stack)
        (cons '(p-rcb "-}") (preprocess tokens (cdr group-stack)))
      (x group-stack)
        (cons '(p-rcb "-}") (preprocess tokens (cdr group-stack))))
    (mtch tokens
      '()
        '()
      (('let_keyword . x) next . rest)
        `((let_keyword . ,x) (p-lcb "{-") . ,(preprocess `(,next . ,rest) `((let_keyword ,next) . ,group-stack)))
      (('where_keyword . x) next . rest)
        `((where_keyword . ,x) (p-lcb "{-") . ,(preprocess `(,next . ,rest) `((where_keyword ,next) . ,group-stack)))
      (('of_keyword . x) next . rest)
        `((of_keyword . ,x) (p-lcb "{-") . ,(preprocess `(,next . ,rest) `((of_keyword ,next) . ,group-stack)))
      (('in_keyword . x) . rest)
        (mtch group-stack
          (('let_keyword next) . gs-rest)
            `((p-rcb "-}") (in_keyword . ,x) . ,(preprocess rest gs-rest)))
      (('do_keyword . x) next . rest)
        `((do_keyword . ,x) (p-lcb "{-") . ,(preprocess `(,next . ,rest) `((do_keyword ,next) . ,group-stack)))
      (a . d)
        (append
          (if (should-insert-semicolon tokens group-stack) '((semicolon ";")) '())
          `(,a . ,(preprocess d group-stack))))))
;(tracefun preprocess)

(define (preprocess-top tokens)
  (let ((preprocessed-tokens (preprocess tokens '())))
    ;(shew 'preprocess (tokens->src tokens) (tokens->src preprocessed-tokens))
    preprocessed-tokens))
;(tracefun preprocess-top)
