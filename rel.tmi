deref-e (Cons (Entry k v) d) kk = if k == kk then v else deref-e d kk
deref-e Nil kk = assert Nil [False]
deref rec k = deref-e (rec-to-entries rec) k

member a (Cons aa d) = if a == aa then True else (member a d)
member a Nil = False

list-append (Cons a d) lyst = (Cons a (list-append d lyst))
list-append Nil lyst = lyst

not True = False
not False = True

and True True = True
and True False = False
and False True = False
and False False = False

unique? (Cons a d) = and (not (member a d)) (unique? d)
unique? Nil = True

;; Does not check if a or b is non-unique.
list-intersect? a b = not (unique? (list-append a b))

key-of-entry (Entry k v) = k
keys rec = map key-of-entry (rec-to-entries rec)

add-recs a b = if (not (list-intersect? (keys a) (keys b))) then (add-recs-1 (rec-to-entries a) (rec-to-entries b)) else (err (RecOverlap a b))
add-recs-1 es0 es1 = entries-to-rec (list-append es0 es1)
