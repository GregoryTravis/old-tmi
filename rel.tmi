deref rec k = find-it (rec-to-entries rec)
  where find-it (Cons (Entry kk vv) d) = if k == kk then vv else find-it d
        find-it [] = assert (NoSuchKey k rec) [False]

keys rec = map (/. ((Entry k v)) k) (rec-to-entries rec)

add-recs a b = if not (list-intersect? (keys a) (keys b))
               then entries-to-rec (list-append (rec-to-entries a) (rec-to-entries b))
               else err (RecOverlap a b)

wherre rel f = filter rel f

proj rel fields = map (/. (rec) proj-rec rec fields) rel
proj-rec rec fields = entries-to-rec
  (filter (/. ((Entry k v)) member k fields) (rec-to-entries rec))

rmkey rec k = entries-to-rec (rmkey-1 (rec-to-entries rec) k)
  where rmkey-1 x kk = case x of
         (Cons (Entry k v) d) => if k == kk then d else Cons (Entry k v) (rmkey-1 d kk)
         [] => err (NoSuchKey kk)

mkrec kvs = entries-to-rec (map (/. ([k, v]) Entry k v) kvs)

un-deref rec k v = add-recs (rmkey rec k) (mkrec [[k, v]])

pnot p = /. (x) not (p x)

un-where rel f w = let ;; yes = wherre rel f
                       no = wherre rel (pnot f)
                    in list-append no w

one [a] = a
un-one lyst x = [x]
