encode-call f args = tmi-uri-encode (native-write-data-string [f, args])

make-call f args = ["/?call=", (encode-call (tmi-object-name f) args)]

barf a b = stuff-to-string [a + b, "baff"]

default-call = native-write-data-string ["web-main", [23]]
default-req params = if params == {} then {call: default-call} else params

function-registry = { barf: barf }

process-params params = let call = deref (default-req params) "call"
  in case (native-read-data-string call) of
    ["web-main", [n]] => web-main n
    [f, args] => stuff-to-string [(Hey (Boo 5) f (deref function-registry f) args)]
    ;; [f, args] => Hey f (tmi-lookup-tlf-by-name f) args
    x => Whoa

web-main n = stuff-to-string ["heyo", n, anchor {href: (make-call barf [1, 2])} "yo"]

;;main-handler params = Return (stuff-to-string ["asdf ", (tmi-pretty-print params), anchor {href: (make-call barf [1, 2])} "yo"])
main-handler params = Return (process-params params)

the-handlers = [Handler "/show-db" (retval-handler show-db), Handler "/" (retval-handler main-handler)]

main = http-server the-handlers
