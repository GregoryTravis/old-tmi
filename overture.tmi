;; TMI oerture

fact 0 = 1
fact n = n * fact (n - 1)

map f Nil = Nil
map f (Cons a d) = Cons (f a) (map f d)

nth 0 (Cons a d) = a
nth n (Cons a d) = nth (n - 1) d

insertion-sort Nil = Nil
insertion-sort (Cons a d) = insert-into a (insertion-sort d)
insert-into x Nil = [x]
insert-into x (Cons a d) = if (x < a) then (Cons x (Cons a d)) else (Cons a (insert-into x d))

filter p Nil = Nil
filter p (Cons a d) = if (p a) then (Cons a (filter p d)) else (filter p d)

test expected actual = if expected == actual then True else (err (TestFailure expected actual))

read-all-chars port =
  (Seq (Command ["read-char", port])
    (/. (c) (Seq (Command ["eof-object?", c])
                 (/. (b) if b then (Return Nil) else (Seq (read-all-chars port) (/. (tail) (Return (Cons c tail))))))))

read-file filename = Seq (Command ["open-input-file", filename])
  ;; (/. (port) Seq (read-all-chars port) (/. (list) (Seq (Command ["pretty-shew", list]) (/. (void) (Return 12)))))
  (/. (port) Seq (read-all-chars port)
    (/. (lst) Seq (Command ["list->string", lst])
      (/. (s) Seq (Command ["pretty-shew", s])
        (/. (blah) Command ["close-input-port", port]))))
