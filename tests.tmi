double x = x * 2
foo (Bar a) = a
wut a = /. (b) a + b

t00 = test [2, 4, 6] (map double [1, 2, 3])
t00-1 = test [] (map double [])
t01 = test 3628800 (fact 10)
t02 = test 45 (foo (Bar 45))
t03 = test (foo (Bar (Both 43 44))) (Both 43 44)
t04 = test [8, 10, 12] (map (/. (x) x * 2) [4, 5, 6])
t05 = test 21 ((wut 1) 20)
t06 = test 120 ((/. (a b) a * b) 10 12)
t07 = test [104, 105, 106, 107] (map (wut 100) [4, 5, 6, 7])
t08 = test [1, 2, 3, 4, 5] (insertion-sort [3, 4, 1, 2, 5])
t09 = test [1, 1, 1] (filter (/. (n) n == 1) [1, 2, 1, 2, 1, 2])
t10 = test 1 1

;; Layout tests
foo0 a = let b = a + a in b * b
foo1 a = let b = a + a
         in b * b
foo2 a = let
           b = a + a
         in b * b
foo3 a = let b =
               a + a
         in b * b
foo4 a = let b =
              a + a
         in b * b
foo5 a = let b =
              a + a
         in
          b * b
t11 = test [36, 36, 36, 36, 36, 36] [foo0 3, foo1 3, foo2 3, foo3 3, foo4 3, foo5 3]

t12 = a * a + a where a = 2

;; Layout tests
t13 = a * b + c where a = 2
                      b = 10
                      c = 7
t14 = a * b + c where
                 a = 2
                 b = 10
                 c = 7
t15 = a * b + c
       where
        a = 2
        b = 10
        c = 7
t16 = a * b + c
       where a = 2
             b = 10
             c = 7
t17 = test [6, 27, 27, 27, 27] [t12, t13, t14, t15, t16]

t18 a = case a of Boo a => a + 100
                  Foo b => b + 1000
t19 a = case a of
          Boo a => a + 100
          Foo b => b + 1000
t20 = let roo (Boo a) = a + 100
          roo (Foo b) = b + 1000
       in
          roo
t20-1 = test [[103, 1004], [103, 1004], [103, 1004]][[t18 (Boo 3), t18 (Foo 4)], [t19 (Boo 3), t19 (Foo 4)], [t20 (Boo 3), t20 (Foo 4)]]

t21 = test 10 (nth 0 [10, 20, 30])
t22 = test 20 (nth 1 [10, 20, 30])
t23 = test 30 (nth 2 [10, 20, 30])

;; Naked constructors
id x = x
dub x = [x, x]
t24 = test [] (nth 0 (dub []))
t25 = test [] (nth 1 (dub []))
t26 x = case x of [] a b => a + b
t27 = test 3 (t26 ([] 1 2))

;; Commands, ffi, and do
t28 = do port <- Command ["open-input-string", "abc"]
         chars <- read-all-chars port
         s <- Command ["list->string", chars]
         Return (test "abc" s)
t28-1 = do port <- ffi open-input-string "abc"
           chars <- read-all-chars port
           s <- ffi list->string chars
           Return (test "abc" s)

t29 = do s <- read-file "test-files/read-test-file"
         Return (test "asdf" s)

t30 = test [3, "asdfzxcv"] [1 + 2, "asdf" + "zxcv"]

;; Just for parsing
t31 = Return { a: { c: let r = 5 in r + r }, b: 13 }
t31-1 = Return {a:{c:let r = 5 in r + r},b:13}

;; Fragile
t32 = test "{b: 13, a: {c: 10}}" (tmi-pretty-print { a: { c: let r = 5 in r + r }, b: 13 })
t33 = test "[4, 5]" (tmi-pretty-print [4, 5])

t34 = do s <- read-data "test-files/read-data-test-file"
         Return (test [{a: {c: 10}, b: 13}, {h: 56}] s)

t35 = test True (all [True])
t36 = test True (all [True, True])
;; t37 = test True (all []))
t38 = test False (all [False])
t39 = test False (all [False, True])

t40 = test 31 (assert 31 [True])

t41 = test {a: 10, b: 20} (entries-to-rec (rec-to-entries {a: 10, b: 20}))
t42 = test 10 (deref {a: 10, b: 20} "a")
t43 = test 20 (deref {a: 10, b: 20} "b")
t44 = test {a: 10, b: 20, c: 30} (extend {a: 10, b: 20} "c" 30)

t55 = test True (member 1 [1, 2, 3])
t56 = test True (member 3 [1, 2, 3])
t57 = test True (member 1 [1])
t58 = test False (member 1 [2])
t59 = test False (member 1 [2, 3, 4])
t60 = test False (member 1 [])
t61 = test [1, 2, 3, 4] (list-append [1, 2] [3, 4])
t62 = test [1, 2, 3] (list-append [1, 2] [3])
t63 = test [1, 2] (list-append [1, 2] [])
t64 = test [1, 2, 3] (list-append [1] [2, 3])
t65 = test [2, 3] (list-append [] [2, 3])
t66 = test [] (list-append [] [])
t67 = [(test True (and True True)),
       (test False (and True False)),
       (test False (and False True)),
       (test False (and False False))]
t68 = [(test False (not True)), (test True (not False))]
t69 = [(test True (unique? [])),
       (test True (unique? [1])),
       (test True (unique? [1, 2, 3])),
       (test False (unique? [1, 1])),
       (test False (unique? [1, 1, 2]))]
hoho = test [1, 2, 2, 3] (list-append [1, 2] [2, 3])
hoho = test False (unique? [1, 2, 2, 3])
t70 = test True (list-intersect? [1, 2] [2, 3])
t71 = test True (list-intersect? [1, 2] [2])
t72 = test True (list-intersect? [2] [2, 3])
t73 = test True (list-intersect? [1, 2, 3] [2, 3])
t74 = test True (list-intersect? [1, 2, 3] [2, 3, 4])
t75 = test False (list-intersect? [1, 2] [3, 4])
t76 = test False (list-intersect? [1] [3])
t77 = test False (list-intersect? [1] [])
t78 = test False (list-intersect? [] [3])
t79 = test False (list-intersect? [] [])
t80 = test ["b", "a"] (keys {a: 10, b: 20})
t81 = test {a: 10, b: 20, c: 30} (add-recs {a: 10} {b: 20, c: 30})
t82 = test {a: 10, b: 20, c: 30} (add-recs {a: 10, b: 20} {c: 30})
t83 = test [3, 3] (filter [1, 2, 3, 4, 5, 3, 4, 5] (/. (x) x == 3))

arel = [{a: 10, b: 20, c: 30},
        {a: 10, b: 21, c: 31},
        {a: 11, b: 20, c: 32},
        {a: 11, b: 21, c: 33},
        {a: 11, b: 22, c: 34}]
reltens = [{a: 10, b: 20, c: 30},
           {a: 10, b: 21, c: 31}]
relevens = [{a: 11, b: 20, c: 32},
            {a: 11, b: 21, c: 33},
            {a: 11, b: 22, c: 34}]

t84 = test reltens (wherre arel (/. (rec) (deref rec "a") == 10))
t85 = test relevens (wherre arel (/. (rec) (deref rec "a") == 11))

t86 = test [{a: 10, b: 20}, {a: 10, b: 21}] (proj [{a: 10, b: 20, c: 30}, {a: 10, b: 21, c: 31}] ["a", "b"])
t87 = test [{a: 10, c: 30}, {a: 10, c: 31}] (proj [{a: 10, b: 20, c: 30}, {a: 10, b: 21, c: 31}] ["a", "c"])
t88 = test [{b: 20, c: 30}, {b: 21, c: 31}] (proj [{a: 10, b: 20, c: 30}, {a: 10, b: 21, c: 31}] ["b", "c"])
t89 = test [{a: 10}, {a: 10}] (proj [{a: 10, b: 20, c: 30}, {a: 10, b: 21, c: 31}] ["a"])
t90 = test [{b: 20}, {b: 21}] (proj [{a: 10, b: 20, c: 30}, {a: 10, b: 21, c: 31}] ["b"])
t91 = test [{c: 30}, {c: 31}] (proj [{a: 10, b: 20, c: 30}, {a: 10, b: 21, c: 31}] ["c"])
;; t92 = test [{}, {}] (proj [{a: 10, b: 20, c: 30}, {a: 10, b: 21, c: 31}] [])
t93 = test [{a: 10, b: 20, c: 30}, {a: 10, b: 21, c: 31}] (proj [{a: 10, b: 20, c: 30}, {a: 10, b: 21, c: 31}] ["a", "b", "c"])

t94 = test {b: 20, c: 30} (rmkey {a: 10, b: 20, c: 30} "a")
t95 = test {a: 10, c: 30} (rmkey {a: 10, b: 20, c: 30} "b")
t96 = test {a: 10, b: 20} (rmkey {a: 10, b: 20, c: 30} "c")
t97 = test {b: 20} (rmkey {a: 10, b: 20} "a")

t98 = test {a: 10} (mkrec [["a", 10]])
t99 = test {a: 10, b: 20} (mkrec [["a", 10], ["b", 20]])
;; t100 = test {} (mkrec [])
t100-temp = test (rmkey {a: 10} "a") (mkrec []) ;; Trick to construct empty rec

t101 = test {a: 10, b: 30} (un-deref {a: 10, b: 20} "b" 30)

t102 = test [{a: 10, b: 20}, {a: 11, b: 31}]
         (un-where [{a: 10, b: 20}, {a: 11, b: 21}] (/. (rec) (deref rec "a") == 11) [{a: 11, b: 31}])
t103 = test [{a: 11, b: 21}, {a: 11, b: 21}]
         (un-where [{a: 10, b: 20}, {a: 11, b: 21}] (/. (rec) (deref rec "a") == 10) [{a: 11, b: 21}])
t104 = test [{a: 10, b: 20}, {a: 11, b: 21}, {a: 12, b:32}]
         (un-where [{a: 10, b: 20}, {a: 11, b: 21}] (/. (rec) (deref rec "a") == 12) [{a: 12, b: 32}])

t105 = test 10 (read (deref-node "a") {a: 10, b: 20})
t106 = test {a: 11, b:20} (write (deref-node "a") {a: 10, b: 20} 11)

t107 = test 33 (one [33])
t108 = test [34] (un-one [32] 34)

t109 = test [[{b: 21, a: 11}, {b: 22, a: 12}], [{b: 21, a: 11}, {b: 22, a: 10}]]
            (let rel = [{a: 10, b: 20}, {a: 11, b: 21}]
                 wn = wherre-node (/. (rec) (deref rec "a") == 10)
                 dn = deref-node "b"
                 on = one-node
              in let own = compose-nodes on wn
                  in let down = compose-nodes dn own
                      in [write own rel {a: 12, b: 22}, write down rel 22])

;; Actually a test for test-rel which should go away
t110 = test-rel [{a: 10}, {a: 11}] [{a: 11}, {a: 10}]

;; Woo-hoo.  Read a file, change a cell, write, read again,
;; revert the cell, write.
t111 = let
  wn = wherre-node (/. (rec) (deref rec "a") == 10)
  wn2 = wherre-node (/. (rec) (deref rec "b") == 21)
  dn = deref-node "c"
  on = one-node
  down = compose-nodes dn (compose-nodes on (compose-nodes wn2 wn))
  orig-db = [{a: 10, b: 20, c: 30},
             {a: 10, b: 21, c: 31},
             {a: 11, b: 20, c: 32},
             {a: 11, b: 21, c: 33},
             {a: 11, b: 22, c: 34}]
  modified-db = [{a: 10, b: 20, c: 30},
                 {a: 10, b: 21, c: 3100},
                 {a: 11, b: 20, c: 32},
                 {a: 11, b: 21, c: 33},
                 {a: 11, b: 22, c: 34}]
in do db <- read-data "db.json"
      True <- Return (test db orig-db)
      [] <- write-data "db2.json" (write down db 3100)
      mdb <- read-data "db2.json"
      True <- Return (test-rel mdb modified-db)
      [] <- write-data "db3.json" (write down mdb 31)
      odb <- read-data "db3.json"
      True <- Return (test-rel odb db)
      [] <- ffi delete-file "db2.json"
      [] <- ffi delete-file "db3.json"
      Return True

t112 = let
  wn = wherre-node (/. (rec) (deref rec "a") == 10)
  wn2 = wherre-node (/. (rec) (deref rec "b") == 21)
  dn = deref-node "c"
  on = one-node
  down = compose-nodes dn (compose-nodes on (compose-nodes wn2 wn))
in do
  [] <- transform-file (mutation-applier down 4444) "db.json" "db2.json"
  [] <- transform-file (mutation-applier down 31) "db2.json" "db3.json"
  db <- read-data "db.json"
  odb <- read-data "db3.json"
  [] <- ffi delete-file "db2.json"
  [] <- ffi delete-file "db3.json"
  True <- Return (test-rel db odb)
  Return True

t113 = test (Just 100) (first-maybe (/. (x) if x == 4 then (Just 100) else Nothing) [3, 4, 5])
t114 = test Nothing (first-maybe (/. (x) if x == 6 then (Just 100) else Nothing) [3, 4, 5])
t115 = test 12 (maybe-default (Just 12) 34)
t116 = test 34 (maybe-default Nothing 34)

t117-f = /. ((Foo x)) x + x
t117 = test 24 (t117-f (Foo 12))

test-add-handler url params bout = let
   a = string->number (deref params "a")
   b = string->number (deref params "b")
in ffi web-respond bout (string-append (number->string (a + b)))
the-handlers = [Handler "/add" test-add-handler]
t118 = do 
  result <- test-handlers the-handlers "/add" {a: "1", b: "20"}
  ;; We do not yet support escape characters but magically we already
  ;; support multi-line strings
  Return (test "HTTP/1.1 200 OK
Content-Type: text/html

21" result)

t119 = do
  Foo (Bar a) <- Return (Foo (Bar 12))
  Foo b <- Return (Foo (Bar 13))
  14 <- Return 14
  Return (test [12, (Bar 13)] [a, b])

t120 = let
    foo a b c = a + b + c
    bar b = b * 1000
 in test 6000 (bar $ foo 1 2 3)

t121 = test "[45, []]" (tmi-pretty-print [45, []])

t122 = let a ** b = a * b + 1
        in test 21 (4 ** 5)

t123 = test True (3 > 2)
t124 = test False (3 < 2)
t125 = test False (2 < 2)
t126 = test True (2 < 3)
t127 = test False (2 > 3)
t128 = test False (2 > 2)

t129 = test True (3 >= 2)
t130 = test False (3 <= 2)
t131 = test True (2 <= 2)
t132 = test True (2 <= 3)
t133 = test False (2 >= 3)
t134 = test True (2 >= 2)

t135 = test True ([1, 2] == [1, 2])
t136 = test False ([1, 2] == [1, 3])
t137 = test True ([1, 2] != [1, 3])
t138 = test False ([1, 2] != [1, 2])

t139 = test 10 (tmi-foldl op+ 0 [0, 1, 2, 3, 4])
t140 = test 10 (tmi-foldr op+ 0 [0, 1, 2, 3, 4])

t141 = test [4, 5, 6] (map (+ 2) [2, 3, 4])
t142 = test [4, 5, 6] (map (2 +) [2, 3, 4])
t143 = test 43 (let foo = (+)
                 in foo 3 40)
;; Syntax fun
t144 = Return {a: 1, b:[2, 3,
  4], c: /. (x) x + x, d: /.
    (y) y * y}
t145 = let
    foo a = /. (b) a + b
    vrr = (foo 1) 20
  in test 21 vrr

t146 = let foo a = if a == 10 then Ten else if a == 11 then Eleven else if a == 12 then Twelve else What
        in [test Ten (foo 10),
            test Eleven (foo 11),
            test Twelve (foo 12),
            test What (foo 13)]

t147 = let
    foo a = if a == 10 then do [] <- Return [] 
                               Return Ten
                       else do [] <- Return []
                               Return What
  in do res <- (foo 10)
        res2 <- (foo 11)
        Return (and (test Ten res) (test What res2))

t148 = let
    tttt x = case x of (Foo a) => a + a
                       (Bar a) => a * a
    uuuu = /. (x) case x of (Foo a) => a + a
                            (Bar a) => a * a
  in test [20, 400] [tttt (Foo 10), uuuu (Bar 20)]

run-do-tests = do True <- t28
                  True <- t29
                  True <- t34
                  True <- t111
                  True <- t112
                  True <- t118
                  True <- t147
                  Return "OK"

main = do ok <- run-do-tests
          Return "OK"
